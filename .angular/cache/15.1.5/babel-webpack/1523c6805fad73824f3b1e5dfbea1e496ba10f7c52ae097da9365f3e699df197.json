{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar Observable_1 = require(\"../Observable\");\nvar isArray_1 = require(\"../util/isArray\");\nvar empty_1 = require(\"./empty\");\nvar subscribeToResult_1 = require(\"../util/subscribeToResult\");\nvar OuterSubscriber_1 = require(\"../OuterSubscriber\");\nvar map_1 = require(\"../operators/map\");\nfunction forkJoin() {\n  var sources = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    sources[_i] = arguments[_i];\n  }\n  var resultSelector;\n  if (typeof sources[sources.length - 1] === 'function') {\n    resultSelector = sources.pop();\n  }\n  if (sources.length === 1 && isArray_1.isArray(sources[0])) {\n    sources = sources[0];\n  }\n  if (sources.length === 0) {\n    return empty_1.EMPTY;\n  }\n  if (resultSelector) {\n    return forkJoin(sources).pipe(map_1.map(function (args) {\n      return resultSelector.apply(void 0, args);\n    }));\n  }\n  return new Observable_1.Observable(function (subscriber) {\n    return new ForkJoinSubscriber(subscriber, sources);\n  });\n}\nexports.forkJoin = forkJoin;\nvar ForkJoinSubscriber = function (_super) {\n  __extends(ForkJoinSubscriber, _super);\n  function ForkJoinSubscriber(destination, sources) {\n    var _this = _super.call(this, destination) || this;\n    _this.sources = sources;\n    _this.completed = 0;\n    _this.haveValues = 0;\n    var len = sources.length;\n    _this.values = new Array(len);\n    for (var i = 0; i < len; i++) {\n      var source = sources[i];\n      var innerSubscription = subscribeToResult_1.subscribeToResult(_this, source, null, i);\n      if (innerSubscription) {\n        _this.add(innerSubscription);\n      }\n    }\n    return _this;\n  }\n  ForkJoinSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n    this.values[outerIndex] = innerValue;\n    if (!innerSub._hasValue) {\n      innerSub._hasValue = true;\n      this.haveValues++;\n    }\n  };\n  ForkJoinSubscriber.prototype.notifyComplete = function (innerSub) {\n    var _a = this,\n      destination = _a.destination,\n      haveValues = _a.haveValues,\n      values = _a.values;\n    var len = values.length;\n    if (!innerSub._hasValue) {\n      destination.complete();\n      return;\n    }\n    this.completed++;\n    if (this.completed !== len) {\n      return;\n    }\n    if (haveValues === len) {\n      destination.next(values);\n    }\n    destination.complete();\n  };\n  return ForkJoinSubscriber;\n}(OuterSubscriber_1.OuterSubscriber);\n//# sourceMappingURL=forkJoin.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}