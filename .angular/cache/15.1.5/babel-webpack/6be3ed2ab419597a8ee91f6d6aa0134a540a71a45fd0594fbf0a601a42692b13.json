{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar Subscriber_1 = require(\"../Subscriber\");\nvar Subscription_1 = require(\"../Subscription\");\nvar Observable_1 = require(\"../Observable\");\nvar Subject_1 = require(\"../Subject\");\nfunction groupBy(keySelector, elementSelector, durationSelector, subjectSelector) {\n  return function (source) {\n    return source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));\n  };\n}\nexports.groupBy = groupBy;\nvar GroupByOperator = function () {\n  function GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector) {\n    this.keySelector = keySelector;\n    this.elementSelector = elementSelector;\n    this.durationSelector = durationSelector;\n    this.subjectSelector = subjectSelector;\n  }\n  GroupByOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new GroupBySubscriber(subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector));\n  };\n  return GroupByOperator;\n}();\nvar GroupBySubscriber = function (_super) {\n  __extends(GroupBySubscriber, _super);\n  function GroupBySubscriber(destination, keySelector, elementSelector, durationSelector, subjectSelector) {\n    var _this = _super.call(this, destination) || this;\n    _this.keySelector = keySelector;\n    _this.elementSelector = elementSelector;\n    _this.durationSelector = durationSelector;\n    _this.subjectSelector = subjectSelector;\n    _this.groups = null;\n    _this.attemptedToUnsubscribe = false;\n    _this.count = 0;\n    return _this;\n  }\n  GroupBySubscriber.prototype._next = function (value) {\n    var key;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      this.error(err);\n      return;\n    }\n    this._group(value, key);\n  };\n  GroupBySubscriber.prototype._group = function (value, key) {\n    var groups = this.groups;\n    if (!groups) {\n      groups = this.groups = new Map();\n    }\n    var group = groups.get(key);\n    var element;\n    if (this.elementSelector) {\n      try {\n        element = this.elementSelector(value);\n      } catch (err) {\n        this.error(err);\n      }\n    } else {\n      element = value;\n    }\n    if (!group) {\n      group = this.subjectSelector ? this.subjectSelector() : new Subject_1.Subject();\n      groups.set(key, group);\n      var groupedObservable = new GroupedObservable(key, group, this);\n      this.destination.next(groupedObservable);\n      if (this.durationSelector) {\n        var duration = void 0;\n        try {\n          duration = this.durationSelector(new GroupedObservable(key, group));\n        } catch (err) {\n          this.error(err);\n          return;\n        }\n        this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n      }\n    }\n    if (!group.closed) {\n      group.next(element);\n    }\n  };\n  GroupBySubscriber.prototype._error = function (err) {\n    var groups = this.groups;\n    if (groups) {\n      groups.forEach(function (group, key) {\n        group.error(err);\n      });\n      groups.clear();\n    }\n    this.destination.error(err);\n  };\n  GroupBySubscriber.prototype._complete = function () {\n    var groups = this.groups;\n    if (groups) {\n      groups.forEach(function (group, key) {\n        group.complete();\n      });\n      groups.clear();\n    }\n    this.destination.complete();\n  };\n  GroupBySubscriber.prototype.removeGroup = function (key) {\n    this.groups.delete(key);\n  };\n  GroupBySubscriber.prototype.unsubscribe = function () {\n    if (!this.closed) {\n      this.attemptedToUnsubscribe = true;\n      if (this.count === 0) {\n        _super.prototype.unsubscribe.call(this);\n      }\n    }\n  };\n  return GroupBySubscriber;\n}(Subscriber_1.Subscriber);\nvar GroupDurationSubscriber = function (_super) {\n  __extends(GroupDurationSubscriber, _super);\n  function GroupDurationSubscriber(key, group, parent) {\n    var _this = _super.call(this, group) || this;\n    _this.key = key;\n    _this.group = group;\n    _this.parent = parent;\n    return _this;\n  }\n  GroupDurationSubscriber.prototype._next = function (value) {\n    this.complete();\n  };\n  GroupDurationSubscriber.prototype._unsubscribe = function () {\n    var _a = this,\n      parent = _a.parent,\n      key = _a.key;\n    this.key = this.parent = null;\n    if (parent) {\n      parent.removeGroup(key);\n    }\n  };\n  return GroupDurationSubscriber;\n}(Subscriber_1.Subscriber);\nvar GroupedObservable = function (_super) {\n  __extends(GroupedObservable, _super);\n  function GroupedObservable(key, groupSubject, refCountSubscription) {\n    var _this = _super.call(this) || this;\n    _this.key = key;\n    _this.groupSubject = groupSubject;\n    _this.refCountSubscription = refCountSubscription;\n    return _this;\n  }\n  GroupedObservable.prototype._subscribe = function (subscriber) {\n    var subscription = new Subscription_1.Subscription();\n    var _a = this,\n      refCountSubscription = _a.refCountSubscription,\n      groupSubject = _a.groupSubject;\n    if (refCountSubscription && !refCountSubscription.closed) {\n      subscription.add(new InnerRefCountSubscription(refCountSubscription));\n    }\n    subscription.add(groupSubject.subscribe(subscriber));\n    return subscription;\n  };\n  return GroupedObservable;\n}(Observable_1.Observable);\nexports.GroupedObservable = GroupedObservable;\nvar InnerRefCountSubscription = function (_super) {\n  __extends(InnerRefCountSubscription, _super);\n  function InnerRefCountSubscription(parent) {\n    var _this = _super.call(this) || this;\n    _this.parent = parent;\n    parent.count++;\n    return _this;\n  }\n  InnerRefCountSubscription.prototype.unsubscribe = function () {\n    var parent = this.parent;\n    if (!parent.closed && !this.closed) {\n      _super.prototype.unsubscribe.call(this);\n      parent.count -= 1;\n      if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n        parent.unsubscribe();\n      }\n    }\n  };\n  return InnerRefCountSubscription;\n}(Subscription_1.Subscription);\n//# sourceMappingURL=groupBy.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}